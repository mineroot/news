// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package handlers_test

import (
	"context"

	"github.com/mineroot/news/internal/paging"
	"github.com/mineroot/news/internal/posts"
	mock "github.com/stretchr/testify/mock"
	"go.mongodb.org/mongo-driver/v2/bson"
)

// NewMockPostsPaginator creates a new instance of MockPostsPaginator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostsPaginator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostsPaginator {
	mock := &MockPostsPaginator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostsPaginator is an autogenerated mock type for the PostsPaginator type
type MockPostsPaginator struct {
	mock.Mock
}

type MockPostsPaginator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostsPaginator) EXPECT() *MockPostsPaginator_Expecter {
	return &MockPostsPaginator_Expecter{mock: &_m.Mock}
}

// FindAllByQueryWithPagination provides a mock function for the type MockPostsPaginator
func (_mock *MockPostsPaginator) FindAllByQueryWithPagination(ctx context.Context, paginator *paging.Paginator, query string) ([]*posts.Post, int, error) {
	ret := _mock.Called(ctx, paginator, query)

	if len(ret) == 0 {
		panic("no return value specified for FindAllByQueryWithPagination")
	}

	var r0 []*posts.Post
	var r1 int
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *paging.Paginator, string) ([]*posts.Post, int, error)); ok {
		return returnFunc(ctx, paginator, query)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *paging.Paginator, string) []*posts.Post); ok {
		r0 = returnFunc(ctx, paginator, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*posts.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *paging.Paginator, string) int); ok {
		r1 = returnFunc(ctx, paginator, query)
	} else {
		r1 = ret.Get(1).(int)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, *paging.Paginator, string) error); ok {
		r2 = returnFunc(ctx, paginator, query)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MockPostsPaginator_FindAllByQueryWithPagination_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllByQueryWithPagination'
type MockPostsPaginator_FindAllByQueryWithPagination_Call struct {
	*mock.Call
}

// FindAllByQueryWithPagination is a helper method to define mock.On call
//   - ctx
//   - paginator
//   - query
func (_e *MockPostsPaginator_Expecter) FindAllByQueryWithPagination(ctx interface{}, paginator interface{}, query interface{}) *MockPostsPaginator_FindAllByQueryWithPagination_Call {
	return &MockPostsPaginator_FindAllByQueryWithPagination_Call{Call: _e.mock.On("FindAllByQueryWithPagination", ctx, paginator, query)}
}

func (_c *MockPostsPaginator_FindAllByQueryWithPagination_Call) Run(run func(ctx context.Context, paginator *paging.Paginator, query string)) *MockPostsPaginator_FindAllByQueryWithPagination_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*paging.Paginator), args[2].(string))
	})
	return _c
}

func (_c *MockPostsPaginator_FindAllByQueryWithPagination_Call) Return(posts1 []*posts.Post, n int, err error) *MockPostsPaginator_FindAllByQueryWithPagination_Call {
	_c.Call.Return(posts1, n, err)
	return _c
}

func (_c *MockPostsPaginator_FindAllByQueryWithPagination_Call) RunAndReturn(run func(ctx context.Context, paginator *paging.Paginator, query string) ([]*posts.Post, int, error)) *MockPostsPaginator_FindAllByQueryWithPagination_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostFinder creates a new instance of MockPostFinder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostFinder(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostFinder {
	mock := &MockPostFinder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostFinder is an autogenerated mock type for the PostFinder type
type MockPostFinder struct {
	mock.Mock
}

type MockPostFinder_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostFinder) EXPECT() *MockPostFinder_Expecter {
	return &MockPostFinder_Expecter{mock: &_m.Mock}
}

// FindById provides a mock function for the type MockPostFinder
func (_mock *MockPostFinder) FindById(ctx context.Context, id bson.ObjectID) (*posts.Post, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *posts.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, bson.ObjectID) (*posts.Post, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, bson.ObjectID) *posts.Post); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*posts.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, bson.ObjectID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostFinder_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type MockPostFinder_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockPostFinder_Expecter) FindById(ctx interface{}, id interface{}) *MockPostFinder_FindById_Call {
	return &MockPostFinder_FindById_Call{Call: _e.mock.On("FindById", ctx, id)}
}

func (_c *MockPostFinder_FindById_Call) Run(run func(ctx context.Context, id bson.ObjectID)) *MockPostFinder_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bson.ObjectID))
	})
	return _c
}

func (_c *MockPostFinder_FindById_Call) Return(post *posts.Post, err error) *MockPostFinder_FindById_Call {
	_c.Call.Return(post, err)
	return _c
}

func (_c *MockPostFinder_FindById_Call) RunAndReturn(run func(ctx context.Context, id bson.ObjectID) (*posts.Post, error)) *MockPostFinder_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostCreator creates a new instance of MockPostCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostCreator {
	mock := &MockPostCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostCreator is an autogenerated mock type for the PostCreator type
type MockPostCreator struct {
	mock.Mock
}

type MockPostCreator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostCreator) EXPECT() *MockPostCreator_Expecter {
	return &MockPostCreator_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockPostCreator
func (_mock *MockPostCreator) Create(ctx context.Context, post *posts.Post) (*posts.Post, error) {
	ret := _mock.Called(ctx, post)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *posts.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *posts.Post) (*posts.Post, error)); ok {
		return returnFunc(ctx, post)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *posts.Post) *posts.Post); ok {
		r0 = returnFunc(ctx, post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*posts.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *posts.Post) error); ok {
		r1 = returnFunc(ctx, post)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostCreator_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockPostCreator_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx
//   - post
func (_e *MockPostCreator_Expecter) Create(ctx interface{}, post interface{}) *MockPostCreator_Create_Call {
	return &MockPostCreator_Create_Call{Call: _e.mock.On("Create", ctx, post)}
}

func (_c *MockPostCreator_Create_Call) Run(run func(ctx context.Context, post *posts.Post)) *MockPostCreator_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*posts.Post))
	})
	return _c
}

func (_c *MockPostCreator_Create_Call) Return(post1 *posts.Post, err error) *MockPostCreator_Create_Call {
	_c.Call.Return(post1, err)
	return _c
}

func (_c *MockPostCreator_Create_Call) RunAndReturn(run func(ctx context.Context, post *posts.Post) (*posts.Post, error)) *MockPostCreator_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostUpdater creates a new instance of MockPostUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostUpdater {
	mock := &MockPostUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostUpdater is an autogenerated mock type for the PostUpdater type
type MockPostUpdater struct {
	mock.Mock
}

type MockPostUpdater_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostUpdater) EXPECT() *MockPostUpdater_Expecter {
	return &MockPostUpdater_Expecter{mock: &_m.Mock}
}

// UpdateById provides a mock function for the type MockPostUpdater
func (_mock *MockPostUpdater) UpdateById(ctx context.Context, id bson.ObjectID, title string, content string) (*posts.Post, error) {
	ret := _mock.Called(ctx, id, title, content)

	if len(ret) == 0 {
		panic("no return value specified for UpdateById")
	}

	var r0 *posts.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, bson.ObjectID, string, string) (*posts.Post, error)); ok {
		return returnFunc(ctx, id, title, content)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, bson.ObjectID, string, string) *posts.Post); ok {
		r0 = returnFunc(ctx, id, title, content)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*posts.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, bson.ObjectID, string, string) error); ok {
		r1 = returnFunc(ctx, id, title, content)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostUpdater_UpdateById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateById'
type MockPostUpdater_UpdateById_Call struct {
	*mock.Call
}

// UpdateById is a helper method to define mock.On call
//   - ctx
//   - id
//   - title
//   - content
func (_e *MockPostUpdater_Expecter) UpdateById(ctx interface{}, id interface{}, title interface{}, content interface{}) *MockPostUpdater_UpdateById_Call {
	return &MockPostUpdater_UpdateById_Call{Call: _e.mock.On("UpdateById", ctx, id, title, content)}
}

func (_c *MockPostUpdater_UpdateById_Call) Run(run func(ctx context.Context, id bson.ObjectID, title string, content string)) *MockPostUpdater_UpdateById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bson.ObjectID), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MockPostUpdater_UpdateById_Call) Return(post *posts.Post, err error) *MockPostUpdater_UpdateById_Call {
	_c.Call.Return(post, err)
	return _c
}

func (_c *MockPostUpdater_UpdateById_Call) RunAndReturn(run func(ctx context.Context, id bson.ObjectID, title string, content string) (*posts.Post, error)) *MockPostUpdater_UpdateById_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPostDeleter creates a new instance of MockPostDeleter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPostDeleter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPostDeleter {
	mock := &MockPostDeleter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockPostDeleter is an autogenerated mock type for the PostDeleter type
type MockPostDeleter struct {
	mock.Mock
}

type MockPostDeleter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPostDeleter) EXPECT() *MockPostDeleter_Expecter {
	return &MockPostDeleter_Expecter{mock: &_m.Mock}
}

// DeleteById provides a mock function for the type MockPostDeleter
func (_mock *MockPostDeleter) DeleteById(ctx context.Context, id bson.ObjectID) (*posts.Post, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteById")
	}

	var r0 *posts.Post
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, bson.ObjectID) (*posts.Post, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, bson.ObjectID) *posts.Post); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*posts.Post)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, bson.ObjectID) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockPostDeleter_DeleteById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteById'
type MockPostDeleter_DeleteById_Call struct {
	*mock.Call
}

// DeleteById is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockPostDeleter_Expecter) DeleteById(ctx interface{}, id interface{}) *MockPostDeleter_DeleteById_Call {
	return &MockPostDeleter_DeleteById_Call{Call: _e.mock.On("DeleteById", ctx, id)}
}

func (_c *MockPostDeleter_DeleteById_Call) Run(run func(ctx context.Context, id bson.ObjectID)) *MockPostDeleter_DeleteById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bson.ObjectID))
	})
	return _c
}

func (_c *MockPostDeleter_DeleteById_Call) Return(post *posts.Post, err error) *MockPostDeleter_DeleteById_Call {
	_c.Call.Return(post, err)
	return _c
}

func (_c *MockPostDeleter_DeleteById_Call) RunAndReturn(run func(ctx context.Context, id bson.ObjectID) (*posts.Post, error)) *MockPostDeleter_DeleteById_Call {
	_c.Call.Return(run)
	return _c
}
